// <auto-generated />
using System;
using FrameworkQ.ConsularServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FrameworkQ.ConsularServices.Migrations
{
    [DbContext(typeof(ConsularDbContext))]
    partial class ConsularDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("sequence_seq", "public");

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("ServiceId"));

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_description");

                    b.Property<double>("ServiceFee")
                        .HasColumnType("double precision")
                        .HasColumnName("service_fee");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.Property<int>("UsualServiceDays")
                        .HasColumnType("integer")
                        .HasColumnName("usual_service_days");

                    b.HasKey("ServiceId");

                    b.ToTable("service_info", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.ServiceInstance", b =>
                {
                    b.Property<long>("ServiceInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("service_instance_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("ServiceInstanceId"));

                    b.PrimitiveCollection<string[]>("AttachmentsRecieved")
                        .HasColumnType("text[]")
                        .HasColumnName("attachments_received");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaymentMadeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_made_at");

                    b.Property<long>("ServiceInfoId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_info_id");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_id");

                    b.HasKey("ServiceInstanceId");

                    b.HasIndex("ServiceInfoId");

                    b.HasIndex("TokenId");

                    b.ToTable("service_instance", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.Station", b =>
                {
                    b.Property<long>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("StationId"));

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("queue_status");

                    b.HasKey("StationId");

                    b.ToTable("station", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.StationLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("LogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint")
                        .HasColumnName("station_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("station_log", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.Token", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("text")
                        .HasColumnName("token_id");

                    b.Property<DateTime>("AppointmentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appointment_at");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("generated_at");

                    b.Property<string>("MobileNo")
                        .HasColumnType("text")
                        .HasColumnName("mobile_no");

                    b.Property<string>("NationalIdNo")
                        .HasColumnType("text")
                        .HasColumnName("nid_no");

                    b.Property<string>("PassportNo")
                        .HasColumnType("text")
                        .HasColumnName("passport_no");

                    b.PrimitiveCollection<long[]>("ServiceType")
                        .HasColumnType("bigint[]")
                        .HasColumnName("service_type");

                    b.HasKey("TokenId");

                    b.ToTable("token", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.Permission", b =>
                {
                    b.Property<long>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PermissionID"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionID");

                    b.ToTable("permission", "public");

                    b.HasData(
                        new
                        {
                            PermissionID = 2L,
                            PermissionName = "UPDATE_USER"
                        },
                        new
                        {
                            PermissionID = 3L,
                            PermissionName = "DELETE_USER"
                        },
                        new
                        {
                            PermissionID = 4L,
                            PermissionName = "DISABLE_USER"
                        },
                        new
                        {
                            PermissionID = 5L,
                            PermissionName = "CHANGE_PASSWORD"
                        },
                        new
                        {
                            PermissionID = 12L,
                            PermissionName = "UPDATE_ROLE"
                        },
                        new
                        {
                            PermissionID = 23L,
                            PermissionName = "MODIFY_ROLE"
                        },
                        new
                        {
                            PermissionID = 14L,
                            PermissionName = "DELETE_ROLE"
                        },
                        new
                        {
                            PermissionID = 22L,
                            PermissionName = "UPDATE_SERVICE_INFO"
                        },
                        new
                        {
                            PermissionID = 32L,
                            PermissionName = "CREATE_TOKEN"
                        },
                        new
                        {
                            PermissionID = 33L,
                            PermissionName = "UPDATE_TOKEN"
                        },
                        new
                        {
                            PermissionID = 42L,
                            PermissionName = "UPDATE_SERVICE_INSTANCE"
                        });
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.Role", b =>
                {
                    b.Property<long>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("RoleID");

                    b.ToTable("role", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.RolePermissionMap", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permission_map", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.RoleUserMap", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_user_map", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("UserId");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.ServiceInstance", b =>
                {
                    b.HasOne("FrameworkQ.ConsularServices.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FrameworkQ.ConsularServices.Services.Token", null)
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Services.StationLog", b =>
                {
                    b.HasOne("FrameworkQ.ConsularServices.Services.Station", null)
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FrameworkQ.ConsularServices.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.RolePermissionMap", b =>
                {
                    b.HasOne("FrameworkQ.ConsularServices.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrameworkQ.ConsularServices.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FrameworkQ.ConsularServices.Users.RoleUserMap", b =>
                {
                    b.HasOne("FrameworkQ.ConsularServices.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrameworkQ.ConsularServices.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
